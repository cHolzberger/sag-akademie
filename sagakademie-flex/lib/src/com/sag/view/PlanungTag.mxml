<?xml version="1.0" encoding="utf-8"?>
<s:Group 
xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark"
autoLayout="false"
creationComplete="componentInit();"
opaqueBackground="{termin.color}"
visible="{standort.enabled}" 
explicitWidth="{standort.enabled ? 120 : 0}"
cacheAsBitmap="false"
toolTip="Termin"
mouseEnabled="true"
clipAndEnableScrolling="true"

>
			<fx:Script><![CDATA[
			import flash.display.DisplayObject;
			import mx.controls.ToolTip;
				import mx.core.DragSource;
				import mx.managers.DragManager;
				import mx.events.*;
				import com.sag.models.*;
				import mx.binding.utils.ChangeWatcher;
		import mx.managers.PopUpManager;
		import mx.core.FlexGlobals;
		import com.mosaiksoftware.SpriteGenerator;
		import flash.display.Bitmap;
		import mx.binding.utils.BindingUtils;
		import mx.core.UIComponent;
		import com.mosaiksoftware.GMBus;
		import mx.events.DynamicEvent;

				[Bindable]
				public var showReferent:Boolean = false;
				
				[Bindable]
				public var showTeilnehmer:Boolean = false;
				
				[Bindable]
				public var showSperrung:Boolean = false;
				
				[Bindable]
				public var tag:String = null;
				
				[Bindable]
				public var standort:Standort;
				
				[Bindable]
				public var termine:SPlanungMonat = null;
				
				[Bindable]
				public var termin:Termin = null;


				private static	var _statusChangeDialog:DialogTerminStatus = null;
				
				public var onDragStartCb:Function = null;
				
				public function dragOverHandler(event:DragEvent):void {
					DragManager.showFeedback(DragManager.NONE);
				}
		
				public function dragEnterHandler(event:DragEvent):void {
					DragManager.showFeedback(DragManager.NONE);

				}

				public function mouseMoveHandler(event:MouseEvent):void {
					//fixme: info object kann ruhig vorinitialisiert werden, muss nur auf
					// den change watcher reagieren
					GMBus.log("updateStatus: " + termin.id + " : " + termin.status);
					if ( termin.freigegeben ) return;
					
					var ds:DragSource = new DragSource();
					var info:Object = new Object;
					
					var sg:SpriteGenerator = new SpriteGenerator();
					var lbl:Bitmap = sg.getImage(termin.name, termin.color);
					var u:UIComponent = new UIComponent();
					u.addChild(lbl);
					GMBus.log("u: " + u.width + " " + u.height );
					info.tag = tag;
					info.monat = termine.monat;
					info.id = termin.id;
					info.standort_id = standort.id;
					info.seminar_id = termin.id;
					info.dauer = termin.dauer;
					info.seminar_art_id = termin.seminar_art_id;
					info.farbe = termin.color;
					info.textfarbe = termin.fontColor;
					
					
					ds.addData(info, "moveSeminar");
					
					DragManager.doDrag(this, ds, event, u);
					if ( onDragStartCb != null ) 
						callLater(onDragStartCb);
				}
				private var _w:ChangeWatcher;
				private var _ev:Object;
				
				private function componentInit():void {
					ToolTip.maxWidth = 200;
					_ev =  {
					"gotit": function (e:FlexEvent) {
						//self.parent.dispatchEvent(e);
					},
					"removed":  function() {
						for(var ev:String in _ev)
						{
							removeEventListener(ev,_ev[ev]);	
						}
						
						seminarLabelBox.removeEventListener(MouseEvent.MOUSE_DOWN, mouseMoveHandler);
						statusBox.removeEventListener(MouseEvent.MOUSE_DOWN, onTerminStatusChange);

						addEventListener("added", _ev["added"]);
					},
					"added": function() {
						
						for(var ev:String in _ev)
						{
							addEventListener(ev,_ev[ev]);	
						}
						seminarLabelBox.addEventListener(MouseEvent.MOUSE_DOWN, mouseMoveHandler);

						statusBox.addEventListener(MouseEvent.MOUSE_DOWN, onTerminStatusChange);
						terminChanged();
					}
					};
					if ( ! _statusChangeDialog ) {	
						_statusChangeDialog = DialogTerminStatus(PopUpManager.createPopUp( FlexGlobals.topLevelApplication as DisplayObject, DialogTerminStatus , true));
						PopUpManager.removePopUp(_statusChangeDialog);
					}

					_w = BindingUtils.bindSetter(terminChanged, this, "termin");
					_ev['added']();

				}
				
				private function terminChanged (event:*= 0):void {
					if ( ! termin ) return;
					
					statusBox.text = termin.status;
					if ( termin.freigabeFarbe == 0x000000 || termin.freigabeFarbe == 0x0000ff ) {
						statusBox.setStyle("color",0xffffff);
					} else {
						statusBox.setStyle ( "color",0x000000);
					}
					statusContainer.opaqueBackground = termin.freigabeFarbe;
					
					seminarLabelBox.text = termin.name;
					seminarLabelBox.setStyle("color", termin.fontColor);
					
					ref.setStyle("color",termin.fontColor);
					ref.text = termin.referenten;

					
					teilnehmer.setStyle("color", termin.fontColor);
					teilnehmer.text = termin.teilnehmer;
					
					sperrung.setStyle("color", termin.fontColor);
					sperrung.text = "-";
					if (termin.aktualisierung_gesperrt  ) {
						sperrung.text = "Termin gesperrt";
					} else if (termin.seminar_art_gesperrt ) {
						sperrung.text = "Seminar gesperrt";
					}

					if ( this.visible ) {
						updateTooltip();
						invalidateDisplayList();
						validateNow();
					}
				}

				private function updateTooltip():void {
					if ( this.termin.inhouse == "1" ) {
						this.toolTip = "Kursnr: " + this.termin.kursnr + " \n"
						+ "Firma: " + this.termin.inhouse_firma + "\n"
						+ "Ort: " + this.termin.inhouse_plz +" " + this.termin.inhouse_ort + "\n"
						+ "Referenten: " + termin.referenten + "\n"
						+ "Status: " + termin.status;
					} else {
						this.toolTip = "Kursnr: " + this.termin.kursnr + " \n"
						+ "Tag: " + this.tag.toString() + " \n"
						+ "Referenten: " + termin.referenten + "\n"

						+ "Status: " + termin.status;
					}
				}

				/** external interface **/
				public function updateStatus(e:DynamicEvent):void {
					//termin = termine.getTermin(tag, standort.id);
					var termin:Termin = e.termin;
					GMBus.log("updateStatus: " + termin.id + " " + e.status + " : " + termin.status);
					//termin.status = e.status;
					termine.updateStatus(termin.id, standort.id,e.status);

					_statusChangeDialog.removeEventListener("statusChanged", updateStatus);
					updateTooltip();
					invalidateDisplayList();
					validateNow();

				}
				
				private function onTerminStatusChange(e:*=null):void {
					GMBus.log("E: " + termin.id);
					//if ( event.target.parent.id != "status" ) return;
					if ( ExternalInterface.available ) {
						ExternalInterface.call("$.mosaikRuntime.setChanged");
					}

					_statusChangeDialog.termin = termin;
					PopUpManager.addPopUp(_statusChangeDialog, FlexGlobals.topLevelApplication as DisplayObject, true);
					PopUpManager.centerPopUp(_statusChangeDialog);
					_statusChangeDialog.addEventListener("statusChanged", updateStatus);

				}
			]]></fx:Script>
			<s:Group x="0" y="0" width="10" height="{height}" id="statusContainer">
				<s:Label verticalAlign="middle" textAlign="center" x="0" y="0" text="x" id="statusBox" width="10" lineHeight="15" height="15" color="0x000000"  fontSize="8" />
			</s:Group>
			<s:Group x="20" y="-2" width="{width-10}" height="100%" opaqueBackground="{termin.color}">
				<s:Label id="seminarLabelBox" x="5" y="5"  text="x" width="100%" lineHeight="15" height="15" fontSize="8" />
			</s:Group>
			<s:Group x="{width-30}" y="-2" height="100%" opaqueBackground="{termin.color}" visible="{showReferent || showTeilnehmer || showSperrung}" >
				<s:Label x="5" y="5"  id="ref" width="30" height="15" paddingTop="1" lineHeight="15"  fontSize="8" visible="{showReferent}" />
				<s:Label x="5" y="5"  id="teilnehmer" width="30" height="15" paddingTop="1" lineHeight="15" visible="{showTeilnehmer}" fontSize="8" />
				<s:Label x="5" y="5"  id="sperrung" width="30" height="15" paddingTop="1" lineHeight="15" visible="{showSperrung}" fontSize="8" />

			</s:Group>
</s:Group>