<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PersonTable extends Doctrine_Table
{
	public function findDuplicates($data) {
		$vorname = "%" . $data['vorname'] . "%";
		$name = "%" . $data['name'] . "%";
		
		$q = Doctrine_Query::create()
			->select("k.*")
    		->from('Person k')
    		->where('k.name LIKE ? AND k.vorname LIKE ? AND k.kontakt_id = ? AND k.id<> ? AND k.name <> "" and k.vorname <> "" AND k.kontakt_id<>0 ', array($name, $vorname, $data['kontakt_id'], $data['id']) )
		->orderBy("k.name ASC");

		return $q;
	}

	public function offsetFind($offset=1, $limit=100) {
		$q = Doctrine_Query::create()
			->select("k.*")
    		->from('Person k')
    		->limit($limit)
    		->offset($offset);
    		return $q;
	}

	public static function detailed() {

	$q = Doctrine_Query::create()
    ->from('Person a')
    ->leftJoin('a.GeaendertVon updater')
    ->leftJoin('a.Kontakt b')
    ->leftJoin('a.Buchungen c')
	->leftJoin('c.Seminar seminar')
    ->where('a.id = ?');

	return $q;
	}
	
	public static function detailedIn($ids) {
		$q = Doctrine_Query::create()
  	  ->from('ViewPerson a')
  	  ->leftJoin('a.Kontakt b')
   	 ->leftJoin('a.Buchungen c')
  	  ->whereIn('a.id', $ids);

		return $q;
	}

	public function detailedSearch($string) {
	    	$string = strtolower(trim(utf8_decode($string))) ;
		$q= "";
		if ( strlen ( $string ) == 2 ) {
			$q = Doctrine_Query::create()
			->from("ViewPerson p")
			->leftJoin('p.Kontakt b')
			->where ("p.name LIKE ?", $string);
		} else {
			$q = Doctrine_Query::create()
			->from("ViewPerson p")
			->leftJoin('p.Kontakt b')
			->where("p.email <> '' AND p.email LIKE ?", $string);

			$data = explode(" ", $string);
			foreach ( $data as $d ) {
				$d = utf8_encode($d);

				if ( !empty($d)) {
					$q->orWhere("p.name <> '' AND p.name LIKE ?", "%$d%");
					$q->orWhere("p.name = ?", "$d");
					$q->orWhere("p.vorname <> '' AND p.vorname LIKE ?", "%$d%");
					$q->orWhere("p.vorname = ?", "$d");
				}
			}
		}
		return $q;
	}

	public static function autocomplete($string) {
		$string = strtolower(trim($string)) ;

		$q = Doctrine_Query::create()
			->select('p.id, p.name, p.vorname, kontakt.firma as firma')
			->from("Person p")
			->leftJoin('p.Kontakt kontakt')
			->where ("p.name LIKE ?", $string . "%")
			->orWhere ("p.vorname LIKE ?", $string . "%")
			->orWhere("kontakt.firma LIKE ?", $string."%")
		 ->orderBy("kontakt.firma, p.name");
		
		return $q;
	}

	public function simpleSearch($string) {
		return $this->autocomplete($string);
	}

	public static function search($string) {
		$string = strtolower(trim(utf8_decode($string))) ;
		
		if ( strlen ( $string ) == 2 ) {
			$q = Doctrine_Query::create()
			->select('p.id')
			->from("ViewPerson p")
			->where ("p.name LIKE ?", $string);
		} else {
			$q = Doctrine_Query::create();
			$q->select('p.id')
			->from("ViewPerson p")
			->where("p.email <> '' AND p.email LIKE ?", $string);
			
			$data = explode(" ", $string);
			foreach ( $data as $d ) {
				$d = utf8_encode($d); 
				
				if ( !empty($d)) {
					$q->orWhere("p.name <> '' AND p.name LIKE ?", "%$d%");
					$q->orWhere("p.vorname <> '' AND p.vorname LIKE ?", "%$d%");
				}
			}
		}
		
		return $q->fetchArray();	
	}
	
	static function detailSearch($name, $vorname, $firma) {
		$ignore = array ("gmbh", "und", "&", "co.", "kg", "u.", "gmbg");

		$name = "%".trim($name)."%";
		$vorname = "%".trim("$vorname")."%";
		$firma = "%" . trim($firma) . "%";
		foreach ($ignore as $i) {
			$firma = str_ireplace ($i, "%", $firma);
		}
		$firma = str_replace(" ", "%", $firma);
		$firma = str_replace("-", "%", $firma);
		$firma = str_replace(".", "%", $firma);
		// dull!!!
		$firma = str_replace ( "%%","%", $firma);
		$firma = str_replace ( "%%","%", $firma);
		$firma = str_replace ( "%%","%", $firma);
		$firma = str_replace ( "%%","%", $firma);
		$firma = str_replace ( "%%","%", $firma);
		
		$q=Doctrine_Query::create()
		->from("ViewPerson p")
		->leftJoin("p.Kontakt kontakt")
		->leftJoin("kontakt.Alias alias")
		->where ("p.vorname LIKE ? AND p.name LIKE ? AND LOWER(kontakt.firma) LIKE ?", array($vorname, $name, $firma) )
		->orWhere ("p.vorname LIKE ? AND p.name LIKE ? AND LOWER(alias.alias) LIKE ?", array($vorname, $name, $firma) );
		
		return $q;
	}

}
?>
